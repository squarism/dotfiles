" Colors - important almost-literal bike shedding decisions and settings here
set background=dark
syntax enable
if !has('gui_running')
  set t_Co=256
endif
colorscheme tender
if (has("termguicolors"))
  set termguicolors
  highlight Visual cterm=reverse ctermbg=NONE
endif

let mapleader = ","
" let g:mapleader = ","

" tabs and status
let g:lightline                         = { 'colorscheme': 'tender' }
let g:lightline.tabline                 = {'left': [['buffers']], 'right': []}
let g:lightline.component_expand        = {'buffers': 'lightline#bufferline#buffers'}
let g:lightline.component_type          = {'buffers': 'tabsel'}
let g:lightline#bufferline#show_number  = 1
let g:lightline#bufferline#shorten_path = 1
set showtabline=2

set cursorline
set listchars=trail:Â·
set noundofile
set undodir=/tmp/vimundofiles
set number
set textwidth=110  " lol ruby code
set tw=110
set hidden  " don't warn on unsaved files

" temp files - you need to create these manually
" I will not do some conditional or trickery when vim boots, unneeded if you just remember to
" make these directories.
set directory=~/.vim/swap
set backupdir=~/.vim/tmp

" whitespace
set tabstop=2 shiftwidth=2 expandtab smarttab

" buffers
map <leader>d :bd<CR>
map <leader>D :BD<CR>

" Oh hell no - hard mode FTW
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" ctrl-p stuff
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\.git$\|\.hg$\|\.svn$\|bower_components$\|dist$\|node_modules$\|tmp$\|app\/assets$\|pkg\|bin\|log',
    \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$\|\.swp$\|\.dat\|\.DS_Store'
    \ }
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

" toggle buffer list
map <C-l> :BuffergatorToggle<CR>

" toggle tagbar
nmap <F8> :TagbarToggle<CR>


" golang files
au BufNewFile,BufRead *.go setlocal noet ts=4 sw=4 sts=4
au BufNewFile,BufRead *.go set nolist
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <leader>i :GoImports<CR>
let g:go_template_autocreate = 0


" File explorer
let g:vimfiler_as_default_explorer        = 1
let g:vimfiler_time_format                = '%m-%d-%y %H:%M:%S'
let g:vimfiler_expand_jump_to_first_child = 0
let g:vimfiler_ignore_pattern             = '\.git\|\.DS_Store'
let g:netrw_liststyle                     = 2
nnoremap <C-N> :VimFilerExplorer -split -simple -parent -no-quit -toggle<CR>


" Insert the date at the top of a development log.
nmap <leader>N ggi# <C-R>=strftime("%Y-%m-%d - %A")<CR><CR><CR><CR><CR><ESC>kk

" convert Ruby 1.9 hashes to 2.0
command! -bar -range=% NotRocket :<line1>,<line2>s/:\@<!:\(\w\+\)\s*=>/\1:/ge
map <leader>R :NotRocket<CR>

" Quick alignment with Tabularize
nmap <leader>a= :Tabularize /=<CR>
vmap <leader>a= :Tabularize /=<CR>
nmap <leader>a: :Tabularize /:<CR>
vmap <leader>a: :Tabularize /:<CR>

" Testing
nmap <silent> <leader>s :TestNearest<CR>
nmap tt :A<CR> " quick switch between tests

let g:turbux_command_prefix = 'bundle exec'

" turn off vim-json quotes autohiding, even though I love them, it's confusing
let g:vim_json_syntax_conceal = 0

set tags=./tags,tags;$HOME


" Autocompletion Settings
" -----------------------------------------------------------------------------
let g:acp_enableAtStartup = 0           " Disable AutoComplPop.
let g:neocomplete#enable_at_startup = 1 " Use neocomplete.
let g:neocomplete#enable_smart_case = 1 " Use smartcase.
let g:neocomplete#sources#syntax#min_keyword_length = 3
set completeopt-=preview

let g:neocomplete#sources#dictionary#dictionaries = {
  \ 'default' : '',
  \ 'vimshell' : $HOME.'/.vimshell_hist',
\ } " dictionary definitions

if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'
inoremap <expr><C-g> neocomplete#undo_completion()
inoremap <expr><C-l> neocomplete#complete_common_string()
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
endfunction
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS>  neocomplete#smart_close_popup()."\<C-h>"
autocmd FileType go setlocal omnifunc=gocomplete#Complete
" -----------------------------------------------------------------------------


" change easymotion prefix
map <SPACE> <Plug>(easymotion-prefix)

" vim-seek - type two letters just like f
" In other words, use it like f/F but with s/S and two letters minimum
" This setting replaces s (substitute - which I never use) with vim-seek
let g:seek_subst_disable = 1

" Golang and vim-go
set autowrite

" Markdown options
let g:vim_markdown_emphasis_multiline = 0
