// Generated by CoffeeScript 1.12.4
(function() {
  var CHROME, EMACS, FINDER, GRID_HEIGHT, GRID_WIDTH, ITERM, MARGIN_X, MARGIN_Y, TERMINAL, VIM, changeGridHeight, changeGridWidth, debug, focused, key_binding, keys, lastFrames, mash, snapAllToGrid, windowDownOneRow, windowGrowOneGridColumn, windowGrowOneGridRow, windowLeftOneColumn, windowRightOneColumn, windowShrinkOneGridColumn, windowShrinkOneGridRow, windowToFullHeight, windowUpOneRow, windows;

  Phoenix.notify("Phoenix config loading");

  debug = function(o, label) {
    if (label == null) {
      label = "obj: ";
    }
    Phoenix.log("debug: " + label + " =>");
    return Phoenix.log(JSON.stringify(o));
  };

  // important definition of what the grid is
  GRID_WIDTH = 16;
  GRID_HEIGHT = 16;

  // and this is the grid offsets used for centering etc
  MARGIN_X = 1;
  MARGIN_Y = 1;


  _.mixin({
    flatmap: function(list, iteratee, context) {
      return _.flatten(_.map(list, iteratee, context));
    }
  });

  focused = function() {
    return Window.focused();
  };

  windows = function() {
    return Window.windows({
      visible: true
    });
  };

  Window.prototype.screenRect = function(screen) {
    return (screen != null ? screen.flippedVisibleFrame() : void 0) || this.screen().flippedVisibleFrame();
  };

  Window.prototype.fullGridFrame = function() {
    return this.calculateGrid({
      y: 0,
      x: 0,
      width: 1,
      height: 1
    });
  };

  snapAllToGrid = function() {
    return _.map(visible(), function(win) {
      return win.snapToGrid();
    });
  };

  changeGridWidth = function(n) {
    GRID_WIDTH = Math.max(1, GRID_WIDTH + n);
    Phoenix.notify("grid is " + GRID_WIDTH + " tiles wide");
    return snapAllToGrid();
  };

  changeGridHeight = function(n) {
    GRID_HEIGHT = Math.max(1, GRID_HEIGHT + n);
    Phoenix.notify("grid is " + GRID_HEIGHT + " tiles high");
    return snapAllToGrid();
  };

  Window.prototype.getGrid = function() {
    var frame, gridHeight, gridWidth;
    frame = this.frame();
    gridWidth = this.screenRect().width / GRID_WIDTH;
    gridHeight = this.screenRect().height / GRID_HEIGHT;
    return {
      y: Math.round((frame.y - this.screenRect().y) / gridHeight),
      x: Math.round((frame.x - this.screenRect().x) / gridWidth),
      width: Math.max(1, Math.round(frame.width / gridWidth)),
      height: Math.max(1, Math.round(frame.height / gridHeight))
    };
  };

  Window.prototype.setGrid = function(grid, screen) {
    var gridHeight, gridWidth;
    screen = screen || focused().screen();
    gridWidth = this.screenRect().width / GRID_WIDTH;
    gridHeight = this.screenRect().height / GRID_HEIGHT;
    return this.setFrame({
      y: ((grid.y * gridHeight) + this.screenRect(screen).y) + MARGIN_Y,
      x: ((grid.x * gridWidth) + this.screenRect(screen).x) + MARGIN_X,
      width: (grid.width * gridWidth) - (MARGIN_X * 2.0),
      height: (grid.height * gridHeight) - (MARGIN_Y * 2.0)
    });
  };

  Window.prototype.snapToGrid = function() {
    if (this.isNormal()) {
      return this.setGrid(this.getGrid());
    }
  };

  Window.prototype.calculateGrid = function(arg) {
    var height, width, x, y;
    x = arg.x, y = arg.y, width = arg.width, height = arg.height;
    return {
      y: Math.round(y * this.screenRect().height) + MARGIN_Y + this.screenRect().y,
      x: Math.round(x * this.screenRect().width) + MARGIN_X + this.screenRect().x,
      width: Math.round(width * this.screenRect().width) - 2.0 * MARGIN_X,
      height: Math.round(height * this.screenRect().height) - 2.0 * MARGIN_Y
    };
  };

  Window.prototype.proportionWidth = function() {
    var s_w, w_w;
    s_w = this.screenRect().width;
    w_w = this.frame().width;
    return Math.round((w_w / s_w) * 10) / 10;
  };

  Window.prototype.toGrid = function(arg) {
    var height, rect, width, x, y;
    x = arg.x, y = arg.y, width = arg.width, height = arg.height;
    rect = this.calculateGrid({
      x: x,
      y: y,
      width: width,
      height: height
    });
    return this.setFrame(rect);
  };

  Window.prototype.topRight = function() {
    return {
      x: this.frame().x + this.frame().width,
      y: this.frame().y
    };
  };

  Window.prototype.toLeft = function() {
    return _.filter(this.neighbors('west'), function(win) {
      return win.topLeft().x < this.topLeft().x - 10;
    });
  };

  Window.prototype.toRight = function() {
    return _.filter(this.neighbors('east'), function(win) {
      return win.topRight().x > this.topRight().x + 10;
    });
  };

  Window.prototype.info = function() {
    var f;
    f = this.frame();
    return "[" + (this.app().processIdentifier()) + "] " + (this.app().name()) + " : " + (this.title()) + "\n{x:" + f.x + ", y:" + f.y + ", width:" + f.width + ", height:" + f.height + "}\n";
  };

  lastFrames = {};

  Window.prototype.toFullScreen = function() {
    if (!_.isEqual(this.frame(), this.fullGridFrame())) {
      this.rememberFrame();
      return this.toGrid({
        y: 0,
        x: 0,
        width: 1,
        height: 1
      });
    } else if (lastFrames[this.uid()]) {
      this.setFrame(lastFrames[this.uid()]);
      return this.forgetFrame();
    }
  };

  Window.prototype.uid = function() {
    return (this.app().name()) + "::" + (this.title());
  };

  Window.prototype.rememberFrame = function() {
    return lastFrames[this.uid()] = this.frame();
  };

  Window.prototype.forgetFrame = function() {
    return delete lastFrames[this.uid()];
  };

  Window.prototype.togglingWidth = function() {
    switch (this.proportionWidth()) {
      case 0.8:
        return 0.5;
      case 0.5:
        return 0.3;
      default:
        return 0.8;
    }
  };

  Window.prototype.toTopHalf = function() {
    return this.toGrid({
      x: 0,
      y: 0,
      width: 1,
      height: 0.5
    });
  };

  Window.prototype.toBottomHalf = function() {
    return this.toGrid({
      x: 0,
      y: 0.5,
      width: 1,
      height: 0.5
    });
  };

  Window.prototype.toLeftHalf = function(width=0.5) {
    return this.toGrid({
      x: 0,
      y: 0,
      width: width,
      height: 1
    });
  };

  Window.prototype.toRightHalf = function(width=0.5, x=0.5) {
    return this.toGrid({
      x: x,
      y: 0,
      width: width,
      height: 1
    });
  };

  Window.prototype.toLeftToggle = function() {
    return this.toGrid({
      x: 0,
      y: 0,
      width: this.togglingWidth(),
      height: 1
    });
  };

  Window.prototype.toRightToggle = function() {
    return this.toGrid({
      x: 1 - this.togglingWidth(),
      y: 0,
      width: this.togglingWidth(),
      height: 1
    });
  };

  // these change depending on monitor size
  // for widescreen, 0.30 width works well
  //   then set x for right sides to 0.70
  // for 4:3 monitors, 0.5 width works well
  Window.prototype.toTopRight = function() {
    return this.toGrid({
      x: 0.5,
      y: 0,
      width: 0.5,
      height: 0.5
    });
  };

  Window.prototype.toBottomRight = function() {
    return this.toGrid({
      x: 0.5,
      y: 0.5,
      width: 0.5,
      height: 0.5
    });
  };

  Window.prototype.toTopLeft = function() {
    return this.toGrid({
      x: 0,
      y: 0,
      width: 0.5,
      height: 0.5
    });
  };

  Window.prototype.toBottomLeft = function() {
    return this.toGrid({
      x: 0,
      y: 0.5,
      width: 0.5,
      height: 0.5
    });
  };

  Window.prototype.toCenter = function() {
    return this.toGrid({
      x: 0.30,
      y: 0.0,
      width: 0.4,
      height: 0.99
    });
  };

  windowLeftOneColumn = function() {
    var frame;
    frame = focused().getGrid();
    frame.x = Math.max(frame.x - 1, 0);
    return focused().setGrid(frame);
  };

  windowDownOneRow = function() {
    var frame;
    frame = focused().getGrid();
    frame.y = Math.min(Math.floor(frame.y + 1), GRID_HEIGHT - 1);
    return focused().setGrid(frame);
  };

  windowUpOneRow = function() {
    var frame;
    frame = focused().getGrid();
    frame.y = Math.max(Math.floor(frame.y - 1), 0);
    return focused().setGrid(frame);
  };

  windowRightOneColumn = function() {
    var frame;
    frame = focused().getGrid();
    frame.x = Math.min(frame.x + 1, GRID_WIDTH - frame.width);
    return focused().setGrid(frame);
  };

  windowGrowOneGridColumn = function() {
    var frame;
    frame = focused().getGrid();
    frame.width = Math.min(frame.width + 1, GRID_WIDTH - frame.x);
    return focused().setGrid(frame);
  };

  windowShrinkOneGridColumn = function() {
    var frame;
    frame = focused().getGrid();
    frame.width = Math.max(frame.width - 1, 1);
    return focused().setGrid(frame);
  };

  windowGrowOneGridRow = function() {
    var frame;
    frame = focused().getGrid();
    frame.height = Math.min(frame.height + 1, GRID_HEIGHT);
    return focused().setGrid(frame);
  };

  windowShrinkOneGridRow = function() {
    var frame;
    frame = focused().getGrid();
    frame.height = Math.max(frame.height - 1, 1);
    return focused().setGrid(frame);
  };

  windowToFullHeight = function() {
    var frame;
    frame = focused().getGrid();
    frame.y = 0;
    frame.height = GRID_HEIGHT;
    return focused().setGrid(frame);
  };

  App.prototype.firstWindow = function() {
    return this.all({
      visible: true
    })[0];
  };

  App.allWithName = function(name) {
    return _.filter(App.all(), function(app) {
      return app.name() === name;
    });
  };

  App.byName = function(name) {
    var app;
    app = _.first(App.allWithName(name));
    app.show();
    return app;
  };

  App.focusOrStart = function(name) {
    var activeWindows, apps;
    apps = App.allWithName(name);
    if (_.isEmpty(apps)) {
      Phoenix.notify("Starting " + name);
      App.launch(name);
    } else {
      Phoenix.notify("Switching to " + name);
    }
    windows = _.flatmap(apps, function(x) {
      return x.windows();
    });
    activeWindows = _.reject(windows, function(win) {
      return win.isMinimized();
    });
    if (_.isEmpty(activeWindows)) {
      App.launch(name);
    }
    return _.each(activeWindows, function(win) {
      return win.focus();
    });
  };

  keys = [];

  key_binding = function(key, description, modifier, fn) {
    return keys.push(Key.on(key, modifier, fn));
  };

  mash = 'ctrl-alt-cmd'.split('-');

  key_binding(']', 'Narrow Right', mash, function() {
    return focused().toRightHalf(0.3, 0.7);
  });

  key_binding('[', 'Narrow Left', mash, function() {
    return focused().toLeftHalf(0.3);
  });

  key_binding('left', 'Left side toggle', mash, function() {
    return focused().toLeftHalf();
  });

  key_binding('right', 'Right side toggle', mash, function() {
    return focused().toRightHalf();
  });

  key_binding('Q', 'Top Left', mash, function() {
    return focused().toTopLeft();
  });

  key_binding('A', 'Bottom Left', mash, function() {
    return focused().toBottomLeft();
  });

  key_binding('W', 'Top Right', mash, function() {
    return focused().toTopRight();
  });

  key_binding('S', 'Bottom Right', mash, function() {
    return focused().toBottomRight();
  });

  key_binding('space', 'Maximize Window', mash, function() {
    return focused().toFullScreen();
  });

  key_binding('C', 'Center Stage', mash, function() {
    return focused().toCenter();
  });

  key_binding('H', 'Move Grid Left', mash, function() {
    return windowLeftOneColumn();
  });

  key_binding('J', 'Move Grid Down', mash, function() {
    return windowDownOneRow();
  });

  key_binding('K', 'Move Grid Up', mash, function() {
    return windowUpOneRow();
  });

  key_binding('L', 'Move Grid Right', mash, function() {
    return windowRightOneColumn();
  });

  key_binding('U', 'Window Full Height', mash, function() {
    return windowToFullHeight();
  });

  key_binding('I', 'Shrink by One Column', mash, function() {
    return windowShrinkOneGridColumn();
  });

  key_binding('O', 'Grow by One Column', mash, function() {
    return windowGrowOneGridColumn();
  });

  key_binding('.', 'Shrink by One Row', mash, function() {
    return windowShrinkOneGridRow();
  });

  key_binding(',', 'Grow by One Row', mash, function() {
    return windowGrowOneGridRow();
  });

  // attempt at making a 3 column layout
  key_binding('1', 'Browser on Left', mash, function() {
    focused().toGrid({
      x: 0,
      y: 0,
      width: 0.30,
      height: 1.00
    });
  });

  key_binding('2', 'Code in Middle', mash, function() {
    focused().toGrid({
      x: 0.30,
      y: 0,
      width: 0.45,
      height: 1.00
    });
  });

  key_binding('3', 'Shell on Right', mash, function() {
    focused().toGrid({
      x: 0.75,
      y: 0,
      width: 0.274,
      height: 1.00
    });
  });

  Phoenix.notify("Loaded");

}).call(this);
